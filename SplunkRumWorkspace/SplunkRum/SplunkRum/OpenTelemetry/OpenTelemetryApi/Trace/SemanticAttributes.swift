/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */
// DO **NOT** EDIT. This file is automatically generated.

import Foundation

public enum SemanticAttributes: String {
    /**
    The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).

    ~~~
    // Examples
    attributes[.awsLambdaInvokedArn] = "arn:aws:lambda:us-east-1:123456:function:myfunction:myalias"
    ~~~

    - Note: This may be different from `faas.id` if an alias is involved.
    - Requires: Value type should be `String`
    */
    case awsLambdaInvokedArn = "aws.lambda.invoked_arn"
    /**
    An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
    - Requires: Value should be one of [`SemanticAttributes.DbSystemValues`](x-source-tag://otelDbSystemValues) (of type `String`)
    */
    case dbSystem = "db.system"
    /**
    The connection string used to connect to the database. It is recommended to remove embedded credentials.

    ~~~
    // Examples
    attributes[.dbConnectionString] = "Server=(localdb)\v11.0;Integrated Security=true;"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbConnectionString = "db.connection_string"
    /**
    Username for accessing the database.

    ~~~
    // Examples
    attributes[.dbUser] = "readonly_user"
    attributes[.dbUser] = "reporting_user"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbUser = "db.user"
    /**
    The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.

    ~~~
    // Examples
    attributes[.dbJdbcDriverClassname] = "org.postgresql.Driver"
    attributes[.dbJdbcDriverClassname] = "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbJdbcDriverClassname = "db.jdbc.driver_classname"
    /**
    If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).

    ~~~
    // Examples
    attributes[.dbName] = "customers"
    attributes[.dbName] = "main"
    ~~~

    - Note: In some SQL databases, the database name to be used is called "schema name".
    - Requires: Value type should be `String`
    */
    case dbName = "db.name"
    /**
    The database statement being executed.

    ~~~
    // Examples
    attributes[.dbStatement] = "SELECT * FROM wuser_table"
    attributes[.dbStatement] = "SET mykey \"WuValue\""
    ~~~

    - Note: The value may be sanitized to exclude sensitive information.
    - Requires: Value type should be `String`
    */
    case dbStatement = "db.statement"
    /**
    The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.

    ~~~
    // Examples
    attributes[.dbOperation] = "findAndModify"
    attributes[.dbOperation] = "HMSET"
    attributes[.dbOperation] = "SELECT"
    ~~~

    - Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.
    - Requires: Value type should be `String`
    */
    case dbOperation = "db.operation"
    /**
    Remote hostname or similar, see note below.

    ~~~
    // Examples
    attributes[.netPeerName] = "example.com"
    ~~~
    - Requires: Value type should be `String`
    */
    case netPeerName = "net.peer.name"
    /**
    Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).

    ~~~
    // Examples
    attributes[.netPeerIp] = "127.0.0.1"
    ~~~
    - Requires: Value type should be `String`
    */
    case netPeerIp = "net.peer.ip"
    /**
    Remote port number.

    ~~~
    // Examplesattributes[.netPeerPort] = 80attributes[.netPeerPort] = 8080attributes[.netPeerPort] = 443
    ~~~
    - Requires: Value type should be `Int`
    */
    case netPeerPort = "net.peer.port"
    /**
    Transport protocol used. See note below.
    - Requires: Value should be one of [`SemanticAttributes.NetTransportValues`](x-source-tag://otelNetTransportValues) (of type `String`)
    */
    case netTransport = "net.transport"
    /**
    The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.

    ~~~
    // Examples
    attributes[.dbMssqlInstanceName] = "MSSQLSERVER"
    ~~~

    - Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).
    - Requires: Value type should be `String`
    */
    case dbMssqlInstanceName = "db.mssql.instance_name"
    /**
    The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.

    ~~~
    // Examples
    attributes[.dbCassandraKeyspace] = "mykeyspace"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbCassandraKeyspace = "db.cassandra.keyspace"
    /**
    The fetch size used for paging, i.e. how many rows will be returned at once.

    ~~~
    // Examplesattributes[.dbCassandraPageSize] = 5000
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbCassandraPageSize = "db.cassandra.page_size"
    /**
    The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
    - Requires: Value should be one of [`SemanticAttributes.DbCassandraConsistencyLevelValues`](x-source-tag://otelDbCassandraConsistencyLevelValues) (of type `String`)
    */
    case dbCassandraConsistencyLevel = "db.cassandra.consistency_level"
    /**
    The name of the primary table that the operation is acting upon, including the schema name (if applicable).

    ~~~
    // Examples
    attributes[.dbCassandraTable] = "mytable"
    ~~~

    - Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
    - Requires: Value type should be `String`
    */
    case dbCassandraTable = "db.cassandra.table"
    /**
    Whether or not the query is idempotent.
    - Requires: Value type should be `Bool`
    */
    case dbCassandraIdempotence = "db.cassandra.idempotence"
    /**
    The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.

    ~~~
    // Examplesattributes[.dbCassandraSpeculativeExecutionCount] = 0attributes[.dbCassandraSpeculativeExecutionCount] = 2
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbCassandraSpeculativeExecutionCount = "db.cassandra.speculative_execution_count"
    /**
    The ID of the coordinating node for a query.

    ~~~
    // Examples
    attributes[.dbCassandraCoordinatorId] = "be13faa2-8574-4d71-926d-27f16cf8a7af"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbCassandraCoordinatorId = "db.cassandra.coordinator.id"
    /**
    The data center of the coordinating node for a query.

    ~~~
    // Examples
    attributes[.dbCassandraCoordinatorDc] = "us-west-2"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbCassandraCoordinatorDc = "db.cassandra.coordinator.dc"
    /**
    The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.

    ~~~
    // Examples
    attributes[.dbHbaseNamespace] = "default"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbHbaseNamespace = "db.hbase.namespace"
    /**
    The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.

    ~~~
    // Examplesattributes[.dbRedisDatabaseIndex] = 0attributes[.dbRedisDatabaseIndex] = 1attributes[.dbRedisDatabaseIndex] = 15
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbRedisDatabaseIndex = "db.redis.database_index"
    /**
    The collection being accessed within the database stated in `db.name`.

    ~~~
    // Examples
    attributes[.dbMongodbCollection] = "customers"
    attributes[.dbMongodbCollection] = "products"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbMongodbCollection = "db.mongodb.collection"
    /**
    The name of the primary table that the operation is acting upon, including the schema name (if applicable).

    ~~~
    // Examples
    attributes[.dbSqlTable] = "public.users"
    attributes[.dbSqlTable] = "customers"
    ~~~

    - Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
    - Requires: Value type should be `String`
    */
    case dbSqlTable = "db.sql.table"
    /**
    The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.

    ~~~
    // Examples
    attributes[.exceptionType] = "java.net.ConnectException"
    attributes[.exceptionType] = "OSError"
    ~~~
    - Requires: Value type should be `String`
    */
    case exceptionType = "exception.type"
    /**
    The exception message.

    ~~~
    // Examples
    attributes[.exceptionMessage] = "Division by zero"
    attributes[.exceptionMessage] = "Can't convert 'int' object to str implicitly"
    ~~~
    - Requires: Value type should be `String`
    */
    case exceptionMessage = "exception.message"
    /**
    A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.

    ~~~
    // Examples
    attributes[.exceptionStacktrace] = "Exception in thread \"main\" java.lang.RuntimeException: Test exception\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\n at com.example.GenerateTrace.main(GenerateTrace.java:5)"
    ~~~
    - Requires: Value type should be `String`
    */
    case exceptionStacktrace = "exception.stacktrace"
    /**
    SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.

    - Note: An exception is considered to have escaped (or left) the scope of a span,
      if that span is ended while the exception is still logically "in flight".
      This may be actually "in flight" in some languages (e.g. if the exception
      is passed to a Context manager's `__exit__` method in Python) but will
      usually be caught at the point of recording the exception in most languages.

      It is usually not possible to determine at the point where an exception is thrown
      whether it will escape the scope of a span.
      However, it is trivial to know that an exception
      will escape, if one checks for an active exception just before ending the span,
      as done in the [example above](#exception-end-example).

      It follows that an exception may still escape the scope of the span
      even if the `exception.escaped` attribute was not set or set to false,
      since the event might have been recorded at a time where it was not
      clear whether the exception will escape.
    - Requires: Value type should be `Bool`
    */
    case exceptionEscaped = "exception.escaped"
    /**
    Type of the trigger on which the function is executed.
    - Requires: Value should be one of [`SemanticAttributes.FaasTriggerValues`](x-source-tag://otelFaasTriggerValues) (of type `String`)
    */
    case faasTrigger = "faas.trigger"
    /**
    The execution ID of the current function execution.

    ~~~
    // Examples
    attributes[.faasExecution] = "af9d5aa4-a685-4c5f-a22b-444f80b3cc28"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasExecution = "faas.execution"
    /**
    The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.

    ~~~
    // Examples
    attributes[.faasDocumentCollection] = "myBucketName"
    attributes[.faasDocumentCollection] = "myDbName"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasDocumentCollection = "faas.document.collection"
    /**
    Describes the type of the operation that was performed on the data.
    - Requires: Value should be one of [`SemanticAttributes.FaasDocumentOperationValues`](x-source-tag://otelFaasDocumentOperationValues) (of type `String`)
    */
    case faasDocumentOperation = "faas.document.operation"
    /**
    A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).

    ~~~
    // Examples
    attributes[.faasDocumentTime] = "2020-01-23T13:47:06Z"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasDocumentTime = "faas.document.time"
    /**
    The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.

    ~~~
    // Examples
    attributes[.faasDocumentName] = "myFile.txt"
    attributes[.faasDocumentName] = "myTableName"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasDocumentName = "faas.document.name"
    /**
    HTTP request method.

    ~~~
    // Examples
    attributes[.httpMethod] = "GET"
    attributes[.httpMethod] = "POST"
    attributes[.httpMethod] = "HEAD"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpMethod = "http.method"
    /**
    Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.

    ~~~
    // Examples
    attributes[.httpUrl] = "https://www.foo.bar/search?q=OpenTelemetry#SemConv"
    ~~~

    - Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute's value should be `https://www.example.com/`.
    - Requires: Value type should be `String`
    */
    case httpUrl = "http.url"
    /**
    The full request target as passed in a HTTP request line or equivalent.

    ~~~
    // Examples
    attributes[.httpTarget] = "/path/12314/?q=ddds#123"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpTarget = "http.target"
    /**
    The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.

    ~~~
    // Examples
    attributes[.httpHost] = "www.example.org"
    ~~~

    - Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.
    - Requires: Value type should be `String`
    */
    case httpHost = "http.host"
    /**
    The URI scheme identifying the used protocol.

    ~~~
    // Examples
    attributes[.httpScheme] = "http"
    attributes[.httpScheme] = "https"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpScheme = "http.scheme"
    /**
    [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).

    ~~~
    // Examplesattributes[.httpStatusCode] = 200
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpStatusCode = "http.status_code"
    /**
    Kind of HTTP protocol used.

    - Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
    - Requires: Value should be one of [`SemanticAttributes.HttpFlavorValues`](x-source-tag://otelHttpFlavorValues) (of type `String`)
    */
    case httpFlavor = "http.flavor"
    /**
    Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.

    ~~~
    // Examples
    attributes[.httpUserAgent] = "CERN-LineMode/2.15 libwww/2.17b3"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpUserAgent = "http.user_agent"
    /**
    The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.

    ~~~
    // Examplesattributes[.httpRequestContentLength] = 3495
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpRequestContentLength = "http.request_content_length"
    /**
    The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.

    ~~~
    // Examplesattributes[.httpRequestContentLengthUncompressed] = 5493
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpRequestContentLengthUncompressed = "http.request_content_length_uncompressed"
    /**
    The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.

    ~~~
    // Examplesattributes[.httpResponseContentLength] = 3495
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpResponseContentLength = "http.response_content_length"
    /**
    The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.

    ~~~
    // Examplesattributes[.httpResponseContentLengthUncompressed] = 5493
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpResponseContentLengthUncompressed = "http.response_content_length_uncompressed"
    /**
    The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).

    ~~~
    // Examples
    attributes[.httpServerName] = "example.com"
    ~~~

    - Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.
    - Requires: Value type should be `String`
    */
    case httpServerName = "http.server_name"
    /**
    The matched route (path template).

    ~~~
    // Examples
    attributes[.httpRoute] = "/users/:userID?"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpRoute = "http.route"
    /**
    The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).

    ~~~
    // Examples
    attributes[.httpClientIp] = "83.164.160.102"
    ~~~

    - Note: This is not necessarily the same as `net.peer.ip`, which would
      identify the network-level peer, which may be a proxy.

      This attribute should be set when a source of information different
      from the one used for `net.peer.ip`, is available even if that other
      source just confirms the same value as `net.peer.ip`.
      Rationale: For `net.peer.ip`, one typically does not know if it
      comes from a proxy, reverse proxy, or the actual client. Setting
      `http.client_ip` when it's the same as `net.peer.ip` means that
      one is at least somewhat confident that the address is not that of
      the closest proxy.
    - Requires: Value type should be `String`
    */
    case httpClientIp = "http.client_ip"
    /**
    Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.

    ~~~
    // Examples
    attributes[.netHostIp] = "192.168.0.1"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostIp = "net.host.ip"
    /**
    Like `net.peer.port` but for the host port.

    ~~~
    // Examplesattributes[.netHostPort] = 35555
    ~~~
    - Requires: Value type should be `Int`
    */
    case netHostPort = "net.host.port"
    /**
    Local hostname or similar, see note below.

    ~~~
    // Examples
    attributes[.netHostName] = "localhost"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostName = "net.host.name"
    /**
    The internet connection type currently being used by the host.

    ~~~
    // Examples
    attributes[.netHostConnectionType] = "wifi"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.NetHostConnectionTypeValues`](x-source-tag://otelNetHostConnectionTypeValues) (of type `String`)
    */
    case netHostConnectionType = "net.host.connection.type"
    /**
    This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.

    ~~~
    // Examples
    attributes[.netHostConnectionSubtype] = "LTE"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.NetHostConnectionSubtypeValues`](x-source-tag://otelNetHostConnectionSubtypeValues) (of type `String`)
    */
    case netHostConnectionSubtype = "net.host.connection.subtype"
    /**
    The name of the mobile carrier.

    ~~~
    // Examples
    attributes[.netHostCarrierName] = "sprint"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostCarrierName = "net.host.carrier.name"
    /**
    The mobile carrier country code.

    ~~~
    // Examples
    attributes[.netHostCarrierMcc] = "310"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostCarrierMcc = "net.host.carrier.mcc"
    /**
    The mobile carrier network code.

    ~~~
    // Examples
    attributes[.netHostCarrierMnc] = "001"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostCarrierMnc = "net.host.carrier.mnc"
    /**
    The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.

    ~~~
    // Examples
    attributes[.netHostCarrierIcc] = "DE"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostCarrierIcc = "net.host.carrier.icc"
    /**
    A string identifying the messaging system.

    ~~~
    // Examples
    attributes[.messagingSystem] = "kafka"
    attributes[.messagingSystem] = "rabbitmq"
    attributes[.messagingSystem] = "activemq"
    attributes[.messagingSystem] = "AmazonSQS"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingSystem = "messaging.system"
    /**
    The message destination name. This might be equal to the span name but is required nevertheless.

    ~~~
    // Examples
    attributes[.messagingDestination] = "MyQueue"
    attributes[.messagingDestination] = "MyTopic"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingDestination = "messaging.destination"
    /**
    The kind of message destination.
    - Requires: Value should be one of [`SemanticAttributes.MessagingDestinationKindValues`](x-source-tag://otelMessagingDestinationKindValues) (of type `String`)
    */
    case messagingDestinationKind = "messaging.destination_kind"
    /**
    A boolean that is true if the message destination is temporary.
    - Requires: Value type should be `Bool`
    */
    case messagingTempDestination = "messaging.temp_destination"
    /**
    The name of the transport protocol.

    ~~~
    // Examples
    attributes[.messagingProtocol] = "AMQP"
    attributes[.messagingProtocol] = "MQTT"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingProtocol = "messaging.protocol"
    /**
    The version of the transport protocol.

    ~~~
    // Examples
    attributes[.messagingProtocolVersion] = "0.9.1"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingProtocolVersion = "messaging.protocol_version"
    /**
    Connection string.

    ~~~
    // Examples
    attributes[.messagingUrl] = "tibjmsnaming://localhost:7222"
    attributes[.messagingUrl] = "https://queue.amazonaws.com/80398EXAMPLE/MyQueue"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingUrl = "messaging.url"
    /**
    A value used by the messaging system as an identifier for the message, represented as a string.

    ~~~
    // Examples
    attributes[.messagingMessageId] = "452a7c7c7c7048c2f887f61572b18fc2"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingMessageId = "messaging.message_id"
    /**
    The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called "Correlation ID".

    ~~~
    // Examples
    attributes[.messagingConversationId] = "MyConversationId"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingConversationId = "messaging.conversation_id"
    /**
    The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.

    ~~~
    // Examplesattributes[.messagingMessagePayloadSizeBytes] = 2738
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingMessagePayloadSizeBytes = "messaging.message_payload_size_bytes"
    /**
    The compressed size of the message payload in bytes.

    ~~~
    // Examplesattributes[.messagingMessagePayloadCompressedSizeBytes] = 2048
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingMessagePayloadCompressedSizeBytes = "messaging.message_payload_compressed_size_bytes"
    /**
    A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).

    ~~~
    // Examples
    attributes[.faasTime] = "2020-01-23T13:47:06Z"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasTime = "faas.time"
    /**
    A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).

    ~~~
    // Examples
    attributes[.faasCron] = "0/5 * * * ? *"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasCron = "faas.cron"
    /**
    A boolean that is true if the serverless function is executed for the first time (aka cold-start).
    - Requires: Value type should be `Bool`
    */
    case faasColdstart = "faas.coldstart"
    /**
    The name of the invoked function.

    ~~~
    // Examples
    attributes[.faasInvokedName] = "my-function"
    ~~~

    - Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.
    - Requires: Value type should be `String`
    */
    case faasInvokedName = "faas.invoked_name"
    /**
    The cloud provider of the invoked function.

    - Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
    - Requires: Value should be one of [`SemanticAttributes.FaasInvokedProviderValues`](x-source-tag://otelFaasInvokedProviderValues) (of type `String`)
    */
    case faasInvokedProvider = "faas.invoked_provider"
    /**
    The cloud region of the invoked function.

    ~~~
    // Examples
    attributes[.faasInvokedRegion] = "eu-central-1"
    ~~~

    - Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.
    - Requires: Value type should be `String`
    */
    case faasInvokedRegion = "faas.invoked_region"
    /**
    The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.

    ~~~
    // Examples
    attributes[.peerService] = "AuthTokenCache"
    ~~~
    - Requires: Value type should be `String`
    */
    case peerService = "peer.service"
    /**
    Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.

    ~~~
    // Examples
    attributes[.enduserId] = "username"
    ~~~
    - Requires: Value type should be `String`
    */
    case enduserId = "enduser.id"
    /**
    Actual/assumed role the client is making the request under extracted from token or application security context.

    ~~~
    // Examples
    attributes[.enduserRole] = "admin"
    ~~~
    - Requires: Value type should be `String`
    */
    case enduserRole = "enduser.role"
    /**
    Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).

    ~~~
    // Examples
    attributes[.enduserScope] = "read:message, write:files"
    ~~~
    - Requires: Value type should be `String`
    */
    case enduserScope = "enduser.scope"
    /**
    Current "managed" thread ID (as opposed to OS thread ID).

    ~~~
    // Examplesattributes[.threadId] = 42
    ~~~
    - Requires: Value type should be `Int`
    */
    case threadId = "thread.id"
    /**
    Current thread name.

    ~~~
    // Examples
    attributes[.threadName] = "main"
    ~~~
    - Requires: Value type should be `String`
    */
    case threadName = "thread.name"
    /**
    The method or function name, or equivalent (usually rightmost part of the code unit's name).

    ~~~
    // Examples
    attributes[.codeFunction] = "serveRequest"
    ~~~
    - Requires: Value type should be `String`
    */
    case codeFunction = "code.function"
    /**
    The "namespace" within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.

    ~~~
    // Examples
    attributes[.codeNamespace] = "com.example.MyHttpService"
    ~~~
    - Requires: Value type should be `String`
    */
    case codeNamespace = "code.namespace"
    /**
    The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).

    ~~~
    // Examples
    attributes[.codeFilepath] = "/usr/local/MyApplication/content_root/app/index.php"
    ~~~
    - Requires: Value type should be `String`
    */
    case codeFilepath = "code.filepath"
    /**
    The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.

    ~~~
    // Examplesattributes[.codeLineno] = 42
    ~~~
    - Requires: Value type should be `Int`
    */
    case codeLineno = "code.lineno"
    /**
    The value `aws-api`.

    ~~~
    // Examples
    attributes[.rpcSystem] = "aws-api"
    ~~~
    - Requires: Value type should be `String`
    */
    case rpcSystem = "rpc.system"
    /**
    The name of the service to which a request is made, as returned by the AWS SDK.

    ~~~
    // Examples
    attributes[.rpcService] = "DynamoDB"
    attributes[.rpcService] = "S3"
    ~~~

    - Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    - Requires: Value type should be `String`
    */
    case rpcService = "rpc.service"
    /**
    The name of the operation corresponding to the request, as returned by the AWS SDK.

    ~~~
    // Examples
    attributes[.rpcMethod] = "GetItem"
    attributes[.rpcMethod] = "PutItem"
    ~~~

    - Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    - Requires: Value type should be `String`
    */
    case rpcMethod = "rpc.method"
    /**
    The keys in the `RequestItems` object field.

    ~~~
    // Examplesattributes[.awsDynamodbTableNames] = Usersattributes[.awsDynamodbTableNames] = Cats
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbTableNames = "aws.dynamodb.table_names"
    /**
    The JSON-serialized value of each item in the `ConsumedCapacity` response field.

    ~~~
    // Examplesattributes[.awsDynamodbConsumedCapacity] = { "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbConsumedCapacity = "aws.dynamodb.consumed_capacity"
    /**
    The JSON-serialized value of the `ItemCollectionMetrics` response field.

    ~~~
    // Examples
    attributes[.awsDynamodbItemCollectionMetrics] = "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbItemCollectionMetrics = "aws.dynamodb.item_collection_metrics"
    /**
    The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbProvisionedReadCapacity] = 1.0attributes[.awsDynamodbProvisionedReadCapacity] = 2.0
    ~~~
    - Requires: Value type should be `double`
    */
    case awsDynamodbProvisionedReadCapacity = "aws.dynamodb.provisioned_read_capacity"
    /**
    The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbProvisionedWriteCapacity] = 1.0attributes[.awsDynamodbProvisionedWriteCapacity] = 2.0
    ~~~
    - Requires: Value type should be `double`
    */
    case awsDynamodbProvisionedWriteCapacity = "aws.dynamodb.provisioned_write_capacity"
    /**
    The value of the `ConsistentRead` request parameter.
    - Requires: Value type should be `Bool`
    */
    case awsDynamodbConsistentRead = "aws.dynamodb.consistent_read"
    /**
    The value of the `ProjectionExpression` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbProjection] = "Title"
    attributes[.awsDynamodbProjection] = "Title, Price, Color"
    attributes[.awsDynamodbProjection] = "Title, Description, RelatedItems, ProductReviews"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbProjection = "aws.dynamodb.projection"
    /**
    The value of the `Limit` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbLimit] = 10
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbLimit = "aws.dynamodb.limit"
    /**
    The value of the `AttributesToGet` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbAttributesToGet] = livesattributes[.awsDynamodbAttributesToGet] = id
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbAttributesToGet = "aws.dynamodb.attributes_to_get"
    /**
    The value of the `IndexName` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbIndexName] = "name_to_group"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbIndexName = "aws.dynamodb.index_name"
    /**
    The value of the `Select` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbSelect] = "ALL_ATTRIBUTES"
    attributes[.awsDynamodbSelect] = "COUNT"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbSelect = "aws.dynamodb.select"
    /**
    The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.

    ~~~
    // Examplesattributes[.awsDynamodbGlobalSecondaryIndexes] = { "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbGlobalSecondaryIndexes = "aws.dynamodb.global_secondary_indexes"
    /**
    The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.

    ~~~
    // Examplesattributes[.awsDynamodbLocalSecondaryIndexes] = { "IndexArn": "string", "IndexName": "string", "IndexSizeBytes": number, "ItemCount": number, "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" } }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbLocalSecondaryIndexes = "aws.dynamodb.local_secondary_indexes"
    /**
    The value of the `ExclusiveStartTableName` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbExclusiveStartTable] = "Users"
    attributes[.awsDynamodbExclusiveStartTable] = "CatsTable"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbExclusiveStartTable = "aws.dynamodb.exclusive_start_table"
    /**
    The the number of items in the `TableNames` response parameter.

    ~~~
    // Examplesattributes[.awsDynamodbTableCount] = 20
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbTableCount = "aws.dynamodb.table_count"
    /**
    The value of the `ScanIndexForward` request parameter.
    - Requires: Value type should be `Bool`
    */
    case awsDynamodbScanForward = "aws.dynamodb.scan_forward"
    /**
    The value of the `Segment` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbSegment] = 10
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbSegment = "aws.dynamodb.segment"
    /**
    The value of the `TotalSegments` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbTotalSegments] = 100
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbTotalSegments = "aws.dynamodb.total_segments"
    /**
    The value of the `Count` response parameter.

    ~~~
    // Examplesattributes[.awsDynamodbCount] = 10
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbCount = "aws.dynamodb.count"
    /**
    The value of the `ScannedCount` response parameter.

    ~~~
    // Examplesattributes[.awsDynamodbScannedCount] = 50
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbScannedCount = "aws.dynamodb.scanned_count"
    /**
    The JSON-serialized value of each item in the `AttributeDefinitions` request field.

    ~~~
    // Examplesattributes[.awsDynamodbAttributeDefinitions] = { "AttributeName": "string", "AttributeType": "string" }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbAttributeDefinitions = "aws.dynamodb.attribute_definitions"
    /**
    The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.

    ~~~
    // Examplesattributes[.awsDynamodbGlobalSecondaryIndexUpdates] = { "Create": { "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbGlobalSecondaryIndexUpdates = "aws.dynamodb.global_secondary_index_updates"
    /**
    A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is "send", this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.
    - Requires: Value should be one of [`SemanticAttributes.MessagingOperationValues`](x-source-tag://otelMessagingOperationValues) (of type `String`)
    */
    case messagingOperation = "messaging.operation"
    /**
    The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.

    ~~~
    // Examples
    attributes[.messagingConsumerId] = "mygroup - client-6"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingConsumerId = "messaging.consumer_id"
    /**
    RabbitMQ message routing key.

    ~~~
    // Examples
    attributes[.messagingRabbitmqRoutingKey] = "myKey"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRabbitmqRoutingKey = "messaging.rabbitmq.routing_key"
    /**
    Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message_id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set.

    ~~~
    // Examples
    attributes[.messagingKafkaMessageKey] = "myKey"
    ~~~

    - Note: If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.
    - Requires: Value type should be `String`
    */
    case messagingKafkaMessageKey = "messaging.kafka.message_key"
    /**
    Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.

    ~~~
    // Examples
    attributes[.messagingKafkaConsumerGroup] = "my-group"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingKafkaConsumerGroup = "messaging.kafka.consumer_group"
    /**
    Client Id for the Consumer or Producer that is handling the message.

    ~~~
    // Examples
    attributes[.messagingKafkaClientId] = "client-5"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingKafkaClientId = "messaging.kafka.client_id"
    /**
    Partition the message is sent to.

    ~~~
    // Examplesattributes[.messagingKafkaPartition] = 2
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingKafkaPartition = "messaging.kafka.partition"
    /**
    A boolean that is true if the message is a tombstone.
    - Requires: Value type should be `Bool`
    */
    case messagingKafkaTombstone = "messaging.kafka.tombstone"
    /**
    The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
    - Requires: Value should be one of [`SemanticAttributes.RpcGrpcStatusCodeValues`](x-source-tag://otelRpcGrpcStatusCodeValues) (of type `Int`)
    */
    case rpcGrpcStatusCode = "rpc.grpc.status_code"
    /**
    Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.

    ~~~
    // Examples
    attributes[.rpcJsonrpcVersion] = "2.0"
    attributes[.rpcJsonrpcVersion] = "1.0"
    ~~~
    - Requires: Value type should be `String`
    */
    case rpcJsonrpcVersion = "rpc.jsonrpc.version"
    /**
    `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.

    ~~~
    // Examples
    attributes[.rpcJsonrpcRequestId] = "10"
    attributes[.rpcJsonrpcRequestId] = "request-7"
    attributes[.rpcJsonrpcRequestId] = ""
    ~~~
    - Requires: Value type should be `String`
    */
    case rpcJsonrpcRequestId = "rpc.jsonrpc.request_id"
    /**
    `error.code` property of response if it is an error response.

    ~~~
    // Examplesattributes[.rpcJsonrpcErrorCode] = -32700attributes[.rpcJsonrpcErrorCode] = 100
    ~~~
    - Requires: Value type should be `Int`
    */
    case rpcJsonrpcErrorCode = "rpc.jsonrpc.error_code"
    /**
    `error.message` property of response if it is an error response.

    ~~~
    // Examples
    attributes[.rpcJsonrpcErrorMessage] = "Parse error"
    attributes[.rpcJsonrpcErrorMessage] = "User already exists"
    ~~~
    - Requires: Value type should be `String`
    */
    case rpcJsonrpcErrorMessage = "rpc.jsonrpc.error_message"
    /**
    Whether this is a received or sent message.
    - Requires: Value should be one of [`SemanticAttributes.MessageTypeValues`](x-source-tag://otelMessageTypeValues) (of type `String`)
    */
    case messageType = "message.type"
    /**
    MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.

    - Note: This way we guarantee that the values will be consistent between different implementations.
    - Requires: Value type should be `Int`
    */
    case messageId = "message.id"
    /**
    Compressed size of the message in bytes.
    - Requires: Value type should be `Int`
    */
    case messageCompressedSize = "message.compressed_size"
    /**
    Uncompressed size of the message in bytes.
    - Requires: Value type should be `Int`
    */
    case messageUncompressedSize = "message.uncompressed_size"

    // MARK: - Manual Definitions
    // Some definitions have not yet been added to the YAML which generates this script.
    // As such as we have some manually defined cases.

    /**
    An exception event **MUST** be called "exception" as per the [specification](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/exceptions.md).
    */
    case exception = "exception";
    
    /**
    An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
    */
    /// - Tag: otelDbSystemValues
    public struct DbSystemValues: CustomStringConvertible {
        /**
        Some other SQL database. Fallback only. See notes.
        */
        public static let otherSql = DbSystemValues("other_sql")
        /**
        Microsoft SQL Server.
        */
        public static let mssql = DbSystemValues("mssql")
        /**
        MySQL.
        */
        public static let mysql = DbSystemValues("mysql")
        /**
        Oracle Database.
        */
        public static let oracle = DbSystemValues("oracle")
        /**
        IBM Db2.
        */
        public static let db2 = DbSystemValues("db2")
        /**
        PostgreSQL.
        */
        public static let postgresql = DbSystemValues("postgresql")
        /**
        Amazon Redshift.
        */
        public static let redshift = DbSystemValues("redshift")
        /**
        Apache Hive.
        */
        public static let hive = DbSystemValues("hive")
        /**
        Cloudscape.
        */
        public static let cloudscape = DbSystemValues("cloudscape")
        /**
        HyperSQL DataBase.
        */
        public static let hsqldb = DbSystemValues("hsqldb")
        /**
        Progress Database.
        */
        public static let progress = DbSystemValues("progress")
        /**
        SAP MaxDB.
        */
        public static let maxdb = DbSystemValues("maxdb")
        /**
        SAP HANA.
        */
        public static let hanadb = DbSystemValues("hanadb")
        /**
        Ingres.
        */
        public static let ingres = DbSystemValues("ingres")
        /**
        FirstSQL.
        */
        public static let firstsql = DbSystemValues("firstsql")
        /**
        EnterpriseDB.
        */
        public static let edb = DbSystemValues("edb")
        /**
        InterSystems Caché.
        */
        public static let cache = DbSystemValues("cache")
        /**
        Adabas (Adaptable Database System).
        */
        public static let adabas = DbSystemValues("adabas")
        /**
        Firebird.
        */
        public static let firebird = DbSystemValues("firebird")
        /**
        Apache Derby.
        */
        public static let derby = DbSystemValues("derby")
        /**
        FileMaker.
        */
        public static let filemaker = DbSystemValues("filemaker")
        /**
        Informix.
        */
        public static let informix = DbSystemValues("informix")
        /**
        InstantDB.
        */
        public static let instantdb = DbSystemValues("instantdb")
        /**
        InterBase.
        */
        public static let interbase = DbSystemValues("interbase")
        /**
        MariaDB.
        */
        public static let mariadb = DbSystemValues("mariadb")
        /**
        Netezza.
        */
        public static let netezza = DbSystemValues("netezza")
        /**
        Pervasive PSQL.
        */
        public static let pervasive = DbSystemValues("pervasive")
        /**
        PointBase.
        */
        public static let pointbase = DbSystemValues("pointbase")
        /**
        SQLite.
        */
        public static let sqlite = DbSystemValues("sqlite")
        /**
        Sybase.
        */
        public static let sybase = DbSystemValues("sybase")
        /**
        Teradata.
        */
        public static let teradata = DbSystemValues("teradata")
        /**
        Vertica.
        */
        public static let vertica = DbSystemValues("vertica")
        /**
        H2.
        */
        public static let h2 = DbSystemValues("h2")
        /**
        ColdFusion IMQ.
        */
        public static let coldfusion = DbSystemValues("coldfusion")
        /**
        Apache Cassandra.
        */
        public static let cassandra = DbSystemValues("cassandra")
        /**
        Apache HBase.
        */
        public static let hbase = DbSystemValues("hbase")
        /**
        MongoDB.
        */
        public static let mongodb = DbSystemValues("mongodb")
        /**
        Redis.
        */
        public static let redis = DbSystemValues("redis")
        /**
        Couchbase.
        */
        public static let couchbase = DbSystemValues("couchbase")
        /**
        CouchDB.
        */
        public static let couchdb = DbSystemValues("couchdb")
        /**
        Microsoft Azure Cosmos DB.
        */
        public static let cosmosdb = DbSystemValues("cosmosdb")
        /**
        Amazon DynamoDB.
        */
        public static let dynamodb = DbSystemValues("dynamodb")
        /**
        Neo4j.
        */
        public static let neo4j = DbSystemValues("neo4j")
        /**
        Apache Geode.
        */
        public static let geode = DbSystemValues("geode")
        /**
        Elasticsearch.
        */
        public static let elasticsearch = DbSystemValues("elasticsearch")
        /**
        Memcached.
        */
        public static let memcached = DbSystemValues("memcached")
        /**
        CockroachDB.
        */
        public static let cockroachdb = DbSystemValues("cockroachdb")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    Transport protocol used. See note below.
    */
    /// - Tag: otelNetTransportValues
    public enum NetTransportValues: String {
        /**
        ip_tcp.
        */
        case ip_tcp = "ip_tcp"
        /**
        ip_udp.
        */
        case ip_udp = "ip_udp"
        /**
        Another IP-based protocol.
        */
        case ip = "ip"
        /**
        Unix Domain socket. See below.
        */
        case unix = "unix"
        /**
        Named or anonymous pipe. See note below.
        */
        case pipe = "pipe"
        /**
        In-process communication.
        */
        case inproc = "inproc"
        /**
        Something else (non IP-based).
        */
        case other = "other"
    }
    
    /**
    The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
    */
    /// - Tag: otelDbCassandraConsistencyLevelValues
    public enum DbCassandraConsistencyLevelValues: String {
        /**
        all.
        */
        case all = "all"
        /**
        each_quorum.
        */
        case each_quorum = "each_quorum"
        /**
        quorum.
        */
        case quorum = "quorum"
        /**
        local_quorum.
        */
        case local_quorum = "local_quorum"
        /**
        one.
        */
        case one = "one"
        /**
        two.
        */
        case two = "two"
        /**
        three.
        */
        case three = "three"
        /**
        local_one.
        */
        case local_one = "local_one"
        /**
        any.
        */
        case any = "any"
        /**
        serial.
        */
        case serial = "serial"
        /**
        local_serial.
        */
        case local_serial = "local_serial"
    }
    
    /**
    Type of the trigger on which the function is executed.
    */
    /// - Tag: otelFaasTriggerValues
    public enum FaasTriggerValues: String {
        /**
        A response to some data source operation such as a database or filesystem read/write.
        */
        case datasource = "datasource"
        /**
        To provide an answer to an inbound HTTP request.
        */
        case http = "http"
        /**
        A function is set to be executed when messages are sent to a messaging system.
        */
        case pubsub = "pubsub"
        /**
        A function is scheduled to be executed regularly.
        */
        case timer = "timer"
        /**
        If none of the others apply.
        */
        case other = "other"
    }
    
    /**
    Describes the type of the operation that was performed on the data.
    */
    /// - Tag: otelFaasDocumentOperationValues
    public struct FaasDocumentOperationValues: CustomStringConvertible {
        /**
        When a new object is created.
        */
        public static let insert = FaasDocumentOperationValues("insert")
        /**
        When an object is modified.
        */
        public static let edit = FaasDocumentOperationValues("edit")
        /**
        When an object is deleted.
        */
        public static let delete = FaasDocumentOperationValues("delete")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    Kind of HTTP protocol used.
    */
    /// - Tag: otelHttpFlavorValues
    public struct HttpFlavorValues: CustomStringConvertible {
        /**
        HTTP 1.0.
        */
        public static let http10 = HttpFlavorValues("1.0")
        /**
        HTTP 1.1.
        */
        public static let http11 = HttpFlavorValues("1.1")
        /**
        HTTP 2.
        */
        public static let http20 = HttpFlavorValues("2.0")
        /**
        SPDY protocol.
        */
        public static let spdy = HttpFlavorValues("SPDY")
        /**
        QUIC protocol.
        */
        public static let quic = HttpFlavorValues("QUIC")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    The internet connection type currently being used by the host.
    */
    /// - Tag: otelNetHostConnectionTypeValues
    public struct NetHostConnectionTypeValues: CustomStringConvertible {
        /**
        wifi.
        */
        public static let wifi = NetHostConnectionTypeValues("wifi")
        /**
        wired.
        */
        public static let wired = NetHostConnectionTypeValues("wired")
        /**
        cell.
        */
        public static let cell = NetHostConnectionTypeValues("cell")
        /**
        unavailable.
        */
        public static let unavailable = NetHostConnectionTypeValues("unavailable")
        /**
        unknown.
        */
        public static let unknown = NetHostConnectionTypeValues("unknown")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
    */
    /// - Tag: otelNetHostConnectionSubtypeValues
    public struct NetHostConnectionSubtypeValues: CustomStringConvertible {
        /**
        GPRS.
        */
        public static let gprs = NetHostConnectionSubtypeValues("gprs")
        /**
        EDGE.
        */
        public static let edge = NetHostConnectionSubtypeValues("edge")
        /**
        UMTS.
        */
        public static let umts = NetHostConnectionSubtypeValues("umts")
        /**
        CDMA.
        */
        public static let cdma = NetHostConnectionSubtypeValues("cdma")
        /**
        EVDO Rel. 0.
        */
        public static let evdo0 = NetHostConnectionSubtypeValues("evdo_0")
        /**
        EVDO Rev. A.
        */
        public static let evdoA = NetHostConnectionSubtypeValues("evdo_a")
        /**
        CDMA2000 1XRTT.
        */
        public static let cdma20001xrtt = NetHostConnectionSubtypeValues("cdma2000_1xrtt")
        /**
        HSDPA.
        */
        public static let hsdpa = NetHostConnectionSubtypeValues("hsdpa")
        /**
        HSUPA.
        */
        public static let hsupa = NetHostConnectionSubtypeValues("hsupa")
        /**
        HSPA.
        */
        public static let hspa = NetHostConnectionSubtypeValues("hspa")
        /**
        IDEN.
        */
        public static let iden = NetHostConnectionSubtypeValues("iden")
        /**
        EVDO Rev. B.
        */
        public static let evdoB = NetHostConnectionSubtypeValues("evdo_b")
        /**
        LTE.
        */
        public static let lte = NetHostConnectionSubtypeValues("lte")
        /**
        EHRPD.
        */
        public static let ehrpd = NetHostConnectionSubtypeValues("ehrpd")
        /**
        HSPAP.
        */
        public static let hspap = NetHostConnectionSubtypeValues("hspap")
        /**
        GSM.
        */
        public static let gsm = NetHostConnectionSubtypeValues("gsm")
        /**
        TD-SCDMA.
        */
        public static let tdScdma = NetHostConnectionSubtypeValues("td_scdma")
        /**
        IWLAN.
        */
        public static let iwlan = NetHostConnectionSubtypeValues("iwlan")
        /**
        5G NR (New Radio).
        */
        public static let nr = NetHostConnectionSubtypeValues("nr")
        /**
        5G NRNSA (New Radio Non-Standalone).
        */
        public static let nrnsa = NetHostConnectionSubtypeValues("nrnsa")
        /**
        LTE CA.
        */
        public static let lteCa = NetHostConnectionSubtypeValues("lte_ca")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    The kind of message destination.
    */
    /// - Tag: otelMessagingDestinationKindValues
    public enum MessagingDestinationKindValues: String {
        /**
        A message sent to a queue.
        */
        case queue = "queue"
        /**
        A message sent to a topic.
        */
        case topic = "topic"
    }
    
    /**
    The cloud provider of the invoked function.
    */
    /// - Tag: otelFaasInvokedProviderValues
    public struct FaasInvokedProviderValues: CustomStringConvertible {
        /**
        Alibaba Cloud.
        */
        public static let alibabaCloud = FaasInvokedProviderValues("alibaba_cloud")
        /**
        Amazon Web Services.
        */
        public static let aws = FaasInvokedProviderValues("aws")
        /**
        Microsoft Azure.
        */
        public static let azure = FaasInvokedProviderValues("azure")
        /**
        Google Cloud Platform.
        */
        public static let gcp = FaasInvokedProviderValues("gcp")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is "send", this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.
    */
    /// - Tag: otelMessagingOperationValues
    public enum MessagingOperationValues: String {
        /**
        receive.
        */
        case receive = "receive"
        /**
        process.
        */
        case process = "process"
    }
    
    /**
    The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
    */
    /// - Tag: otelRpcGrpcStatusCodeValues
    public enum RpcGrpcStatusCodeValues: Int {
        /**
        OK.
        */
        case ok = 0
        /**
        CANCELLED.
        */
        case cancelled = 1
        /**
        UNKNOWN.
        */
        case unknown = 2
        /**
        INVALID_ARGUMENT.
        */
        case invalid_argument = 3
        /**
        DEADLINE_EXCEEDED.
        */
        case deadline_exceeded = 4
        /**
        NOT_FOUND.
        */
        case not_found = 5
        /**
        ALREADY_EXISTS.
        */
        case already_exists = 6
        /**
        PERMISSION_DENIED.
        */
        case permission_denied = 7
        /**
        RESOURCE_EXHAUSTED.
        */
        case resource_exhausted = 8
        /**
        FAILED_PRECONDITION.
        */
        case failed_precondition = 9
        /**
        ABORTED.
        */
        case aborted = 10
        /**
        OUT_OF_RANGE.
        */
        case out_of_range = 11
        /**
        UNIMPLEMENTED.
        */
        case unimplemented = 12
        /**
        INTERNAL.
        */
        case `internal` = 13
        /**
        UNAVAILABLE.
        */
        case unavailable = 14
        /**
        DATA_LOSS.
        */
        case data_loss = 15
        /**
        UNAUTHENTICATED.
        */
        case unauthenticated = 16
    }
    
    /**
    Whether this is a received or sent message.
    */
    /// - Tag: otelMessageTypeValues
    public enum MessageTypeValues: String {
        /**
        sent.
        */
        case sent = "SENT"
        /**
        received.
        */
        case received = "RECEIVED"
    }
    
}